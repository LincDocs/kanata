import{_ as n,e as o,h as a,o as s}from"./app-A1howTpB.js";const i="/kanata/assets/kanata-basic-diagram-hqlDWrVh.svg",t={};function r(l,e){return s(),o("div",null,e[0]||(e[0]=[a('<h1 id="design-doc" tabindex="-1"><a class="header-anchor" href="#design-doc"><span>Design doc</span></a></h1><h2 id="obligatory-diagram" tabindex="-1"><a class="header-anchor" href="#obligatory-diagram"><span>Obligatory diagram</span></a></h2><img src="'+i+`"><h2 id="main" tabindex="-1"><a class="header-anchor" href="#main"><span>main</span></a></h2><ul><li>read args</li><li>read config</li><li>start event loops</li></ul><h2 id="event-loop" tabindex="-1"><a class="header-anchor" href="#event-loop"><span>event loop</span></a></h2><ul><li>read key events</li><li>send events to processing loop on channel</li></ul><h2 id="processing-loop" tabindex="-1"><a class="header-anchor" href="#processing-loop"><span>processing loop</span></a></h2><ul><li>check for events on mpsc</li><li>if event: send event to layout</li><li>tick() the keyberon layout, send any events needed</li><li>if no event: sleep for 1ms</li><li>separate monotonic time checks, because can&#39;t rely on sleep to be<br> fine-grained or accurate</li><li>send <code>ServerMessage</code>s to the TCP server</li></ul><h2 id="tcp-server" tabindex="-1"><a class="header-anchor" href="#tcp-server"><span>TCP server</span></a></h2><ul><li>listen for <code>ClientMessage</code>s and act on them</li><li>recv <code>ServerMessage</code>s from processing loop and forward to all connected<br> clients</li></ul><h2 id="layout" tabindex="-1"><a class="header-anchor" href="#layout"><span>layout</span></a></h2><ul><li><p>uses keyberon</p></li><li><p>indices of <code>kanata_keyberon::layout::Event::{Press, Release}(x,y)</code>:</p><pre><code>x = 0 or 1 (0 is for physical key presses, 1 is for fake keys)
y = OS code of key used as an index
</code></pre></li></ul><h2 id="os-specific-code" tabindex="-1"><a class="header-anchor" href="#os-specific-code"><span>OS-specific code</span></a></h2><p>Most of the OS specific code is in <code>oskbd/</code> and <code>keys/</code>. There&#39;s a bit of it in<br><code>kanata/</code> since the event loops to receive OS events are different.</p>`,15)]))}const d=n(t,[["render",r],["__file","design.html.vue"]]),p=JSON.parse(`{"path":"/design.html","title":"Design doc","lang":"zh-CN","frontmatter":{"description":"Design doc Obligatory diagram main read args read config start event loops event loop read key events send events to processing loop on channel processing loop check for events ...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/kanata/design.html"}],["meta",{"property":"og:site_name","content":"kanata"}],["meta",{"property":"og:title","content":"Design doc"}],["meta",{"property":"og:description","content":"Design doc Obligatory diagram main read args read config start event loops event loop read key events send events to processing loop on channel processing loop check for events ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Design doc\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/kanata/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.57,"words":170},"filePathRelative":"design.md","excerpt":"\\n<h2>Obligatory diagram</h2>\\n\\n<h2>main</h2>\\n<ul>\\n<li>read args</li>\\n<li>read config</li>\\n<li>start event loops</li>\\n</ul>\\n<h2>event loop</h2>\\n<ul>\\n<li>read key events</li>\\n<li>send events to processing loop on channel</li>\\n</ul>\\n<h2>processing loop</h2>\\n<ul>\\n<li>check for events on mpsc</li>\\n<li>if event: send event to layout</li>\\n<li>tick() the keyberon layout, send any events needed</li>\\n<li>if no event: sleep for 1ms</li>\\n<li>separate monotonic time checks, because can't rely on sleep to be<br>\\nfine-grained or accurate</li>\\n<li>send <code>ServerMessage</code>s to the TCP server</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"design.md","value":{"title":"design","path":"design.md","outlink":[],"backlink":[]}}],"links":[]}}}`);export{d as comp,p as data};
