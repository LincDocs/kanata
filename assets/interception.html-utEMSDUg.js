import{_ as t,e as n,h as o,o as i}from"./app-A1howTpB.js";const a={};function d(r,e){return i(),n("div",null,e[0]||(e[0]=[o('<h1 id="windows-interception-driver-implementation-notes" tabindex="-1"><a class="header-anchor" href="#windows-interception-driver-implementation-notes"><span>Windows Interception driver implementation notes</span></a></h1><ul><li>Interception handle is <code>!Send</code> and <code>!Sync</code><ul><li>means a single thread should own both input and output</li><li><code>KbdOut</code> will need to send keyboard output events to that thread as opposed<br> to Linux using <code>uinput</code> and the original Windows code using <code>SendInput</code><br> which are independent of the input devices.</li><li>Maybe save channel in kanata struct as part of new kanata</li></ul></li><li>Interception can filter for only keyboard events <ul><li>should use this filter feature; don&#39;t want to intercept mouse</li></ul></li><li>Need to save previous device for sending to, in case wait/receive (with<br> timeout) don&#39;t return anything so that sending stuff can be sent to some<br> device.</li><li>Input <code>ScanCode</code> maps to the keyberon <code>KeyCode</code>; they both use the USB<br> standard codes. <ul><li>For ease of integration will probably need to unfortunately convert it to<br> an <code>OsCode</code> even though the processing loop will soon after just convert it<br> back to <code>KeyCode</code>. Oh well.</li></ul></li></ul>',2)]))}const c=t(a,[["render",d],["__file","interception.html.vue"]]),s=JSON.parse(`{"path":"/interception.html","title":"Windows Interception driver implementation notes","lang":"zh-CN","frontmatter":{"description":"Windows Interception driver implementation notes Interception handle is !Send and !Sync means a single thread should own both input and output KbdOut will need to send keyboard ...","head":[["meta",{"property":"og:url","content":"https://LincDocs.github.io/kanata/interception.html"}],["meta",{"property":"og:site_name","content":"kanata"}],["meta",{"property":"og:title","content":"Windows Interception driver implementation notes"}],["meta",{"property":"og:description","content":"Windows Interception driver implementation notes Interception handle is !Send and !Sync means a single thread should own both input and output KbdOut will need to send keyboard ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Windows Interception driver implementation notes\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincDocs\\",\\"url\\":\\"https://github.com/LincDocs/kanata/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.51,"words":153},"filePathRelative":"interception.md","excerpt":"\\n<ul>\\n<li>Interception handle is <code>!Send</code> and <code>!Sync</code>\\n<ul>\\n<li>means a single thread should own both input and output</li>\\n<li><code>KbdOut</code> will need to send keyboard output events to that thread as opposed<br>\\nto Linux using <code>uinput</code> and the original Windows code using <code>SendInput</code><br>\\nwhich are independent of the input devices.</li>\\n<li>Maybe save channel in kanata struct as part of new kanata</li>\\n</ul>\\n</li>\\n<li>Interception can filter for only keyboard events\\n<ul>\\n<li>should use this filter feature; don't want to intercept mouse</li>\\n</ul>\\n</li>\\n<li>Need to save previous device for sending to, in case wait/receive (with<br>\\ntimeout) don't return anything so that sending stuff can be sent to some<br>\\ndevice.</li>\\n<li>Input <code>ScanCode</code> maps to the keyberon <code>KeyCode</code>; they both use the USB<br>\\nstandard codes.\\n<ul>\\n<li>For ease of integration will probably need to unfortunately convert it to<br>\\nan <code>OsCode</code> even though the processing loop will soon after just convert it<br>\\nback to <code>KeyCode</code>. Oh well.</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"interception.md","value":{"title":"interception","path":"interception.md","outlink":[],"backlink":[]}}],"links":[]}}}`);export{c as comp,s as data};
